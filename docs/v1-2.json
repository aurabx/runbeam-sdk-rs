{
  "openapi": "3.1.0",
  "info": {
    "title": "runbeam",
    "version": "1.0.0",
    "description": "\n# Runbeam API\n\nThe Runbeam API provides programmatic access to manage Harmony gateway instances, services, and routing configurations.\n\n## What is Runbeam?\n\nRunbeam is a gateway management platform that allows you to:\n- Deploy and manage Harmony gateway (proxy) instances\n- Configure services that expose APIs through your gateways\n- Define endpoints (frontend APIs) and backends (upstream servers)\n- Create routing pipelines with middleware and transformations\n- Apply access control policies and network configurations\n\n## Authentication\n\nThe API supports multiple authentication methods depending on your use case:\n\n### 1. User JWT Tokens\nFor individual users managing their team's resources:\n- **CLI Device Flow**: Used by the Runbeam CLI tool - exchange device token for JWT\n- **Direct JWT**: For custom integrations with user credentials\n- **Lifespan**: Short-lived (typically 1 hour)\n- **Scope**: Access to user's teams and resources\n\n### 2. Team JWT Tokens\nFor team-scoped programmatic access:\n- Long-lived JWT tokens issued to teams\n- Used for team-level automation\n- **Lifespan**: Configurable\n- **Scope**: Automatically scoped to the team\n\n### 3. Sanctum API Tokens\nFor long-lived, manageable API access:\n- Created via the web interface (Team Settings → API Tokens)\n- Ideal for server-to-server integrations and CI/CD pipelines\n- **Lifespan**: Until revoked (optional expiration date)\n- **Permissions**: Configurable abilities (read, create, update, delete, or full access)\n- **Scope**: Team-scoped with automatic resource isolation\n- **Management**: Can be easily revoked from the web UI\n\n### 4. Gateway Machine Tokens\nFor Harmony gateway instances to access the API autonomously:\n- Long-lived tokens (30 days) issued after gateway authorization\n- Team-scoped with gateway-specific permissions\n- Used by gateways for autonomous operation\n\n## Using Authentication\n\nAll authenticated endpoints require a Bearer token in the Authorization header:\n\n```bash\n# Using User JWT token (from CLI or direct authentication)\ncurl -H \"Authorization: Bearer eyJ0eXAiOiJKV1QiLCJh...\" \\\n  https://api.runbeam.com/api/gateways\n\n# Using Sanctum API token (from web UI token management)\ncurl -H \"Authorization: Bearer 1|abc123def456...\" \\\n  https://api.runbeam.com/api/gateways\n\n# Using Team JWT token\ncurl -H \"Authorization: Bearer eyJ0eXAiOiJKV1Qi...\" \\\n  https://api.runbeam.com/api/gateways\n\n# Using Gateway machine token\ncurl -H \"Authorization: Bearer gw_token_abc123...\" \\\n  https://api.runbeam.com/api/gateways\n```\n\n### Creating a Sanctum API Token\n\n1. Log into the Runbeam web interface\n2. Navigate to your Team Settings\n3. Go to the API Tokens section\n4. Click \"Create New Token\"\n5. Set a name, permissions, and optional expiration\n6. Copy the token (it will only be shown once)\n\nThe API automatically determines the authentication method from the token format and scopes access accordingly.\n\n## Core Concepts\n\n- **Gateway**: A Harmony proxy instance that handles traffic routing\n- **Service**: An application or API deployed on a gateway\n- **Endpoint**: A frontend API route exposed by a service\n- **Backend**: An upstream server or API that handles requests\n- **Pipeline**: Routes requests from endpoints to backends with middleware\n- **Middleware**: Request/response processors (auth, rate limiting, CORS, etc.)\n- **Transform**: Request/response transformations\n- **Policy**: Access control rules\n- **Network**: Network and DNS configurations for gateways\n        "
  },
  "servers": [
    {
      "url": "https://runbeam.lndo.site/api"
    }
  ],
  "paths": {
    "/authentications": {
      "get": {
        "operationId": "authentications.index",
        "summary": "Display a listing of the resource",
        "tags": [
          "Authentication"
        ],
        "responses": {
          "200": {
            "description": "Paginated set of `AuthenticationResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/AuthenticationResource"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "first": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "last": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "first",
                        "last",
                        "prev",
                        "next"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "from": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "links": {
                          "type": "array",
                          "description": "Generated paginator links.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "url",
                              "label",
                              "active"
                            ]
                          }
                        },
                        "path": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Base path for paginator generated URLs."
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of items shown per page."
                        },
                        "to": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Number of the last item in the slice."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items being paginated."
                        }
                      },
                      "required": [
                        "current_page",
                        "from",
                        "last_page",
                        "links",
                        "path",
                        "per_page",
                        "to",
                        "total"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "authentications.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Authentication"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`AuthenticationResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/authentications/{authentication}": {
      "get": {
        "operationId": "authentications.show",
        "summary": "Display the specified resource",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "authentication",
            "in": "path",
            "required": true,
            "description": "The authentication ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`AuthenticationResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "authentications.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "authentication",
            "in": "path",
            "required": true,
            "description": "The authentication ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AuthenticationRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`AuthenticationResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/AuthenticationResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "authentications.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Authentication"
        ],
        "parameters": [
          {
            "name": "authentication",
            "in": "path",
            "required": true,
            "description": "The authentication ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Authentication deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/backends": {
      "get": {
        "operationId": "backends.index",
        "description": "Retrieve a paginated list of all backend server configurations for your team.",
        "summary": "List Backends",
        "tags": [
          "Backend"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "backends.store",
        "description": "Register a new upstream server as a backend for one of your services.\nThe backend will be available for routing once associated with a pipeline.",
        "summary": "Create Backend",
        "tags": [
          "Backend"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/backends/{backend}": {
      "get": {
        "operationId": "backends.show",
        "description": "Retrieve detailed information about a specific backend server configuration.",
        "summary": "Get Backend",
        "tags": [
          "Backend"
        ],
        "parameters": [
          {
            "name": "backend",
            "in": "path",
            "required": true,
            "description": "The backend to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "backends.update",
        "description": "Modify the configuration of an existing backend server. Changes affect\nall pipelines routing traffic to this backend.",
        "summary": "Update Backend",
        "tags": [
          "Backend"
        ],
        "parameters": [
          {
            "name": "backend",
            "in": "path",
            "required": true,
            "description": "The backend to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BackendRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "backends.destroy",
        "description": "Remove a backend server from the service. This will disconnect the backend\nfrom all routing pipelines.\n\n⚠️ **Warning**: Ensure no active pipelines depend on this backend before deletion.",
        "summary": "Delete Backend",
        "tags": [
          "Backend"
        ],
        "parameters": [
          {
            "name": "backend",
            "in": "path",
            "required": true,
            "description": "The backend to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/gateway/base-url": {
      "get": {
        "operationId": "gateway.base-url",
        "description": "Service discovery endpoint that returns the base URL for the changes API.\nHarmony Proxy instances call this periodically to discover the API location,\nallowing the URL to be changed without updating proxy configurations.",
        "summary": "Get Base URL",
        "tags": [
          "Change"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/gateway/changes": {
      "get": {
        "operationId": "gateway.changes.index",
        "description": "Retrieve queued configuration changes ready for the authenticated gateway.\nGateways poll this endpoint periodically (typically every 30 seconds) to\ndiscover new configuration updates.",
        "summary": "List Changes",
        "tags": [
          "Change"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      }
    },
    "/gateway/changes/{change}": {
      "get": {
        "operationId": "gateway.changes.show",
        "description": "Retrieve details of a specific change by ID.",
        "summary": "Get Change",
        "tags": [
          "Change"
        ],
        "parameters": [
          {
            "name": "change",
            "in": "path",
            "required": true,
            "description": "The change to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/gateway/changes/acknowledge": {
      "post": {
        "operationId": "gateway.changes.acknowledge",
        "description": "Bulk acknowledge that changes have been received. Gateways should call this\nimmediately after retrieving changes to update their status from \"pending\" to \"acknowledged\".",
        "summary": "Acknowledge Changes",
        "tags": [
          "Change"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "change_ids": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "change_ids"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/gateway/changes/{change}/applied": {
      "post": {
        "operationId": "gateway.changes.applied",
        "description": "Report that a change has been successfully applied to the gateway configuration.",
        "summary": "Mark Change Applied",
        "tags": [
          "Change"
        ],
        "parameters": [
          {
            "name": "change",
            "in": "path",
            "required": true,
            "description": "The change that was applied",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/gateway/changes/{change}/failed": {
      "post": {
        "operationId": "gateway.changes.failed",
        "description": "Report that a change failed to apply, including error details for troubleshooting.",
        "summary": "Mark Change Failed",
        "tags": [
          "Change"
        ],
        "parameters": [
          {
            "name": "change",
            "in": "path",
            "required": true,
            "description": "The change that failed",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "error": {
                    "type": "string"
                  },
                  "details": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "error"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/cli/start-login": {
      "post": {
        "operationId": "cli.start-login",
        "description": "Initiates the CLI authentication flow by generating a device token.\nThe CLI should open the verification URL in the user's browser and then\npoll the checkLogin endpoint to wait for user authorization.\n\nThe device token expires after 10 minutes.",
        "summary": "Start CLI Login",
        "tags": [
          "CliAuth"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/cli/check-login/{deviceToken}": {
      "get": {
        "operationId": "cli.check-login",
        "description": "Polls the status of a device token to check if the user has completed\nauthentication in their browser. The CLI should call this endpoint\nrepeatedly (with appropriate delays) until it receives an authenticated response.\n\n## Response States\n\n- **pending** (200): User hasn't authorized yet, continue polling\n- **authenticated** (200): Success! Returns JWT token\n- **expired** (410): Device token expired, must start new login flow\n- **invalid** (404): Device token not found",
        "summary": "Check CLI Login Status",
        "tags": [
          "CliAuth"
        ],
        "parameters": [
          {
            "name": "deviceToken",
            "in": "path",
            "required": true,
            "description": "The device token from startLogin()",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/endpoints": {
      "get": {
        "operationId": "endpoints.index",
        "description": "Retrieve a paginated list of all API endpoints defined for your team's services.",
        "summary": "List Endpoints",
        "tags": [
          "Endpoint"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "endpoints.store",
        "description": "Define a new API endpoint for one of your services. The endpoint will be\navailable for routing once associated with a pipeline.",
        "summary": "Create Endpoint",
        "tags": [
          "Endpoint"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/endpoints/{endpoint}": {
      "get": {
        "operationId": "endpoints.show",
        "description": "Retrieve detailed information about a specific API endpoint.",
        "summary": "Get Endpoint",
        "tags": [
          "Endpoint"
        ],
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "description": "The endpoint to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "endpoints.update",
        "description": "Modify the configuration of an existing API endpoint. Changes affect\nrequest routing and processing immediately.",
        "summary": "Update Endpoint",
        "tags": [
          "Endpoint"
        ],
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "description": "The endpoint to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/EndpointRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "endpoints.destroy",
        "description": "Remove an API endpoint from the service. This will stop routing traffic\nfor this endpoint pattern.",
        "summary": "Delete Endpoint",
        "tags": [
          "Endpoint"
        ],
        "parameters": [
          {
            "name": "endpoint",
            "in": "path",
            "required": true,
            "description": "The endpoint to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/gateways": {
      "get": {
        "operationId": "gateways.index",
        "description": "Retrieve a paginated list of all Harmony gateway instances belonging to your team.\nResults include basic gateway information and relationships to endpoints and services.",
        "summary": "List Gateways",
        "tags": [
          "Gateway"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "gateways.store",
        "description": "Create a new Harmony gateway instance for your team. The gateway will be created\nin a disabled state by default and must be authorized before it can process traffic.",
        "summary": "Create Gateway",
        "tags": [
          "Gateway"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/gateways/{gateway}": {
      "get": {
        "operationId": "gateways.show",
        "description": "Retrieve detailed information about a specific gateway instance, including\nits configuration, relationships to services and endpoints, and current status.",
        "summary": "Get Gateway",
        "tags": [
          "Gateway"
        ],
        "parameters": [
          {
            "name": "gateway",
            "in": "path",
            "required": true,
            "description": "The gateway to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "gateways.update",
        "description": "Update the configuration of an existing gateway instance. You can modify settings\nsuch as name, enabled status, DNS configuration, and other operational parameters.\nChanges take effect immediately on the gateway.",
        "summary": "Update Gateway",
        "tags": [
          "Gateway"
        ],
        "parameters": [
          {
            "name": "gateway",
            "in": "path",
            "required": true,
            "description": "The gateway to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/GatewayRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "gateways.destroy",
        "description": "Permanently delete a gateway instance. This will:\n- Remove the gateway and all its configurations\n- Disconnect all associated services\n- Revoke all machine tokens issued to the gateway\n\n⚠️ **Warning**: This action cannot be undone. Ensure the gateway is not actively\nprocessing traffic before deletion.",
        "summary": "Delete Gateway",
        "tags": [
          "Gateway"
        ],
        "parameters": [
          {
            "name": "gateway",
            "in": "path",
            "required": true,
            "description": "The gateway to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/harmony/authorize": {
      "post": {
        "operationId": "harmony.authorize",
        "description": "Authorize a Harmony gateway instance to access the API on behalf of your team.\nThis endpoint validates your JWT token, associates the gateway with your team,\nand issues a long-lived machine token for the gateway to use.\n\nIf the gateway code doesn't exist, a new gateway will be created automatically.\nIf it exists but belongs to a different team, authorization will be denied.\n\nThe machine token expires after 30 days and has team-scoped permissions.",
        "summary": "Authorize Gateway",
        "tags": [
          "HarmonyAuth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "gateway_code": {
                    "type": "string",
                    "maxLength": 255
                  },
                  "machine_public_key": {
                    "type": [
                      "string",
                      "null"
                    ]
                  },
                  "metadata": {
                    "type": [
                      "array",
                      "null"
                    ],
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "token",
                  "gateway_code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/harmony/revoke": {
      "post": {
        "operationId": "harmony.revoke",
        "description": "Revoke all machine tokens for a specific gateway. This immediately\ninvalidates the gateway's API access and requires re-authorization.\n\nUse this endpoint when:\n- A gateway instance is decommissioned\n- You suspect a token has been compromised\n- You need to force a gateway to re-authorize",
        "summary": "Revoke Gateway Tokens",
        "tags": [
          "HarmonyAuth"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "token": {
                    "type": "string"
                  },
                  "gateway_code": {
                    "type": "string",
                    "maxLength": 255
                  }
                },
                "required": [
                  "token",
                  "gateway_code"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/.well-known/jwks.json": {
      "get": {
        "operationId": "jwks",
        "description": "Returns the JSON Web Key Set (JWKS) containing public keys for JWT token verification.\nThis endpoint is publicly accessible and follows RFC 7517 (JWKS specification).\n\nClients can use these keys to verify the signature of JWT tokens issued by the\nRunbeam API without needing to make authenticated requests.\n\nThe response is cached for 1 hour to reduce load.",
        "summary": "Get Public Keys",
        "tags": [
          "Jwks"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          }
        }
      }
    },
    "/middlewares": {
      "get": {
        "operationId": "middlewares.index",
        "summary": "Display a listing of the resource",
        "tags": [
          "Middleware"
        ],
        "responses": {
          "200": {
            "description": "Paginated set of `MiddlewareResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/MiddlewareResource"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "first": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "last": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "first",
                        "last",
                        "prev",
                        "next"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "from": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "links": {
                          "type": "array",
                          "description": "Generated paginator links.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "url",
                              "label",
                              "active"
                            ]
                          }
                        },
                        "path": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Base path for paginator generated URLs."
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of items shown per page."
                        },
                        "to": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Number of the last item in the slice."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items being paginated."
                        }
                      },
                      "required": [
                        "current_page",
                        "from",
                        "last_page",
                        "links",
                        "path",
                        "per_page",
                        "to",
                        "total"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "middlewares.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Middleware"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiddlewareRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`MiddlewareResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MiddlewareResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/middlewares/{middleware}": {
      "get": {
        "operationId": "middlewares.show",
        "summary": "Display the specified resource",
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "middleware",
            "in": "path",
            "required": true,
            "description": "The middleware ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`MiddlewareResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MiddlewareResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "middlewares.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "middleware",
            "in": "path",
            "required": true,
            "description": "The middleware ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/MiddlewareRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`MiddlewareResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/MiddlewareResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "middlewares.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Middleware"
        ],
        "parameters": [
          {
            "name": "middleware",
            "in": "path",
            "required": true,
            "description": "The middleware ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Middleware deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/networks": {
      "post": {
        "operationId": "networks.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Network"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`NetworkResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NetworkResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/networks/{network}": {
      "get": {
        "operationId": "networks.show",
        "summary": "Display the specified resource",
        "tags": [
          "Network"
        ],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "description": "The network ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`NetworkResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NetworkResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "networks.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Network"
        ],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "description": "The network ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NetworkRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`NetworkResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/NetworkResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "networks.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Network"
        ],
        "parameters": [
          {
            "name": "network",
            "in": "path",
            "required": true,
            "description": "The network ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Network deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/pipelines": {
      "get": {
        "operationId": "pipelines.index",
        "summary": "Display a listing of the resource",
        "tags": [
          "Pipeline"
        ],
        "responses": {
          "200": {
            "description": "Paginated set of `PipelineResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PipelineResource"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "first": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "last": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "first",
                        "last",
                        "prev",
                        "next"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "from": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "links": {
                          "type": "array",
                          "description": "Generated paginator links.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "url",
                              "label",
                              "active"
                            ]
                          }
                        },
                        "path": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Base path for paginator generated URLs."
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of items shown per page."
                        },
                        "to": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Number of the last item in the slice."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items being paginated."
                        }
                      },
                      "required": [
                        "current_page",
                        "from",
                        "last_page",
                        "links",
                        "path",
                        "per_page",
                        "to",
                        "total"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "pipelines.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Pipeline"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`PipelineResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PipelineResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/pipelines/{pipeline}": {
      "get": {
        "operationId": "pipelines.show",
        "summary": "Display the specified resource",
        "tags": [
          "Pipeline"
        ],
        "parameters": [
          {
            "name": "pipeline",
            "in": "path",
            "required": true,
            "description": "The pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`PipelineResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PipelineResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "pipelines.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Pipeline"
        ],
        "parameters": [
          {
            "name": "pipeline",
            "in": "path",
            "required": true,
            "description": "The pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PipelineRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`PipelineResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PipelineResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "pipelines.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Pipeline"
        ],
        "parameters": [
          {
            "name": "pipeline",
            "in": "path",
            "required": true,
            "description": "The pipeline ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Pipeline deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/policies": {
      "get": {
        "operationId": "policies.index",
        "summary": "Display a listing of the resource",
        "tags": [
          "Policy"
        ],
        "responses": {
          "200": {
            "description": "Paginated set of `PolicyResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/PolicyResource"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "first": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "last": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "first",
                        "last",
                        "prev",
                        "next"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "from": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "links": {
                          "type": "array",
                          "description": "Generated paginator links.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "url",
                              "label",
                              "active"
                            ]
                          }
                        },
                        "path": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Base path for paginator generated URLs."
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of items shown per page."
                        },
                        "to": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Number of the last item in the slice."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items being paginated."
                        }
                      },
                      "required": [
                        "current_page",
                        "from",
                        "last_page",
                        "links",
                        "path",
                        "per_page",
                        "to",
                        "total"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "policies.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Policy"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`PolicyResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PolicyResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/policies/{policy}": {
      "get": {
        "operationId": "policies.show",
        "summary": "Display the specified resource",
        "tags": [
          "Policy"
        ],
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "description": "The policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`PolicyResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PolicyResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "policies.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Policy"
        ],
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "description": "The policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PolicyRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`PolicyResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/PolicyResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "policies.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Policy"
        ],
        "parameters": [
          {
            "name": "policy",
            "in": "path",
            "required": true,
            "description": "The policy ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Policy deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/services": {
      "get": {
        "operationId": "services.index",
        "description": "Retrieve a paginated list of all services deployed on your team's gateways.\nResults include service configuration and relationships to gateways and endpoints.",
        "summary": "List Services",
        "tags": [
          "Service"
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "services.store",
        "description": "Deploy a new service on one of your team's gateways. The service will be ready\nto accept endpoint and backend configurations immediately after creation.",
        "summary": "Create Service",
        "tags": [
          "Service"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    201
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/services/{service}": {
      "get": {
        "operationId": "services.show",
        "description": "Retrieve detailed information about a specific service, including its gateway\nassociation, configured endpoints, and backend connections.",
        "summary": "Get Service",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The service to retrieve",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "services.update",
        "description": "Modify the configuration of an existing service. You can update service metadata,\ntype, and operational settings. Changes are applied immediately.",
        "summary": "Update Service",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The service to update",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ServiceRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "services.destroy",
        "description": "Permanently delete a service from a gateway. This will:\n- Remove the service and all its configurations\n- Delete all associated endpoints\n- Remove backend connections\n- Disconnect from any pipelines\n\n⚠️ **Warning**: This action cannot be undone and will stop traffic routing\nfor all endpoints associated with this service.",
        "summary": "Delete Service",
        "tags": [
          "Service"
        ],
        "parameters": [
          {
            "name": "service",
            "in": "path",
            "required": true,
            "description": "The service to delete",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "integer",
                  "enum": [
                    200
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    },
    "/transforms": {
      "get": {
        "operationId": "transforms.index",
        "summary": "Display a listing of the resource",
        "tags": [
          "Transform"
        ],
        "responses": {
          "200": {
            "description": "Paginated set of `TransformResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "$ref": "#/components/schemas/TransformResource"
                      }
                    },
                    "links": {
                      "type": "object",
                      "properties": {
                        "first": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "last": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "prev": {
                          "type": [
                            "string",
                            "null"
                          ]
                        },
                        "next": {
                          "type": [
                            "string",
                            "null"
                          ]
                        }
                      },
                      "required": [
                        "first",
                        "last",
                        "prev",
                        "next"
                      ]
                    },
                    "meta": {
                      "type": "object",
                      "properties": {
                        "current_page": {
                          "type": "integer"
                        },
                        "from": {
                          "type": [
                            "integer",
                            "null"
                          ]
                        },
                        "last_page": {
                          "type": "integer"
                        },
                        "links": {
                          "type": "array",
                          "description": "Generated paginator links.",
                          "items": {
                            "type": "object",
                            "properties": {
                              "url": {
                                "type": [
                                  "string",
                                  "null"
                                ]
                              },
                              "label": {
                                "type": "string"
                              },
                              "active": {
                                "type": "boolean"
                              }
                            },
                            "required": [
                              "url",
                              "label",
                              "active"
                            ]
                          }
                        },
                        "path": {
                          "type": [
                            "string",
                            "null"
                          ],
                          "description": "Base path for paginator generated URLs."
                        },
                        "per_page": {
                          "type": "integer",
                          "description": "Number of items shown per page."
                        },
                        "to": {
                          "type": [
                            "integer",
                            "null"
                          ],
                          "description": "Number of the last item in the slice."
                        },
                        "total": {
                          "type": "integer",
                          "description": "Total number of items being paginated."
                        }
                      },
                      "required": [
                        "current_page",
                        "from",
                        "last_page",
                        "links",
                        "path",
                        "per_page",
                        "to",
                        "total"
                      ]
                    }
                  },
                  "required": [
                    "data",
                    "links",
                    "meta"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          }
        }
      },
      "post": {
        "operationId": "transforms.store",
        "summary": "Store a newly created resource in storage",
        "tags": [
          "Transform"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`TransformResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransformResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      }
    },
    "/transforms/{transform}": {
      "get": {
        "operationId": "transforms.show",
        "summary": "Display the specified resource",
        "tags": [
          "Transform"
        ],
        "parameters": [
          {
            "name": "transform",
            "in": "path",
            "required": true,
            "description": "The transform ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "`TransformResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransformResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      },
      "put": {
        "operationId": "transforms.update",
        "summary": "Update the specified resource in storage",
        "tags": [
          "Transform"
        ],
        "parameters": [
          {
            "name": "transform",
            "in": "path",
            "required": true,
            "description": "The transform ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TransformRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "`TransformResource`",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "$ref": "#/components/schemas/TransformResource"
                    }
                  },
                  "required": [
                    "data"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          },
          "422": {
            "$ref": "#/components/responses/ValidationException"
          }
        }
      },
      "delete": {
        "operationId": "transforms.destroy",
        "summary": "Remove the specified resource from storage",
        "tags": [
          "Transform"
        ],
        "parameters": [
          {
            "name": "transform",
            "in": "path",
            "required": true,
            "description": "The transform ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "enum": [
                        "Transform deleted successfully"
                      ]
                    }
                  },
                  "required": [
                    "message"
                  ]
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/AuthenticationException"
          },
          "403": {
            "$ref": "#/components/responses/AuthorizationException"
          },
          "404": {
            "$ref": "#/components/responses/ModelNotFoundException"
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "AuthenticationRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ],
        "title": "AuthenticationRequest"
      },
      "AuthenticationResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "authentication"
            ]
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": [
              "string",
              "null"
            ]
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "gateway_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "options": {
            "type": [
              "string",
              "null"
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "code",
          "name",
          "team_id",
          "gateway_id",
          "options",
          "created_at",
          "updated_at"
        ],
        "title": "AuthenticationResource"
      },
      "BackendRequest": {
        "type": "object",
        "description": "Backend Request\n\nValidation rules for creating and updating backend server configurations.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Backend server name/identifier (required)",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ],
        "title": "BackendRequest"
      },
      "EndpointRequest": {
        "type": "object",
        "description": "Endpoint Request\n\nValidation rules for creating and updating API endpoints.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Endpoint name/identifier (required)",
            "maxLength": 255
          },
          "service_id": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Associated service ID (optional, must exist in services table)"
          }
        },
        "required": [
          "name"
        ],
        "title": "EndpointRequest"
      },
      "GatewayRequest": {
        "type": "object",
        "description": "Gateway Request\n\nValidation rules for creating and updating Harmony gateway instances.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Gateway identifier (required, lowercase, alphanumeric with hyphens/underscores, unique)",
            "maxLength": 255
          },
          "enabled": {
            "type": "boolean",
            "description": "Whether the gateway should be enabled (optional, defaults to system default)"
          },
          "pipelines_path": {
            "type": [
              "string",
              "null"
            ],
            "description": "Harmony DSL configuration paths",
            "maxLength": 255
          },
          "transforms_path": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "jwks_cache_duration_hours": {
            "type": [
              "integer",
              "null"
            ],
            "minimum": 1,
            "maximum": 168
          },
          "management_enabled": {
            "type": "boolean",
            "description": "Management API configuration"
          },
          "management_base_path": {
            "type": [
              "string",
              "null"
            ],
            "maxLength": 255
          },
          "management_network_id": {
            "type": [
              "integer",
              "null"
            ]
          },
          "dns": {
            "type": [
              "array",
              "null"
            ],
            "description": "DNS hostnames for the gateway (optional array of strings)",
            "items": {
              "type": "string"
            }
          },
          "settings": {
            "type": [
              "array",
              "null"
            ],
            "description": "Additional gateway settings as JSON object (optional)",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "name"
        ],
        "title": "GatewayRequest"
      },
      "MiddlewareRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ],
        "title": "MiddlewareRequest"
      },
      "MiddlewareResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "middleware"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "middleware_type": {
            "type": "string"
          },
          "options": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "null"
              },
              {
                "type": "string"
              }
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "team_id",
          "middleware_type",
          "options",
          "created_at",
          "updated_at"
        ],
        "title": "MiddlewareResource"
      },
      "NetworkRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "enable_wireguard": {
            "type": "boolean"
          },
          "interface": {
            "type": "string"
          },
          "bind_address": {
            "type": "string"
          },
          "bind_port": {
            "type": "integer",
            "minimum": 1,
            "maximum": 65535
          }
        },
        "required": [
          "name",
          "enable_wireguard",
          "bind_address",
          "bind_port"
        ],
        "title": "NetworkRequest"
      },
      "NetworkResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "network"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "gateway_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "enable_wireguard": {
            "type": "boolean"
          },
          "interface": {
            "type": [
              "string",
              "null"
            ]
          },
          "http": {
            "type": "object",
            "properties": {
              "bind_address": {
                "anyOf": [
                  {
                    "type": "string"
                  },
                  {
                    "type": "null"
                  },
                  {
                    "type": "string",
                    "enum": [
                      "0.0.0.0"
                    ]
                  }
                ]
              },
              "bind_port": {
                "type": [
                  "integer",
                  "null"
                ]
              }
            },
            "required": [
              "bind_address",
              "bind_port"
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "team_id",
          "gateway_id",
          "enable_wireguard",
          "interface",
          "created_at",
          "updated_at"
        ],
        "title": "NetworkResource"
      },
      "PipelineRequest": {
        "type": "object",
        "description": "Pipeline Request\n\nValidation rules for creating and updating routing pipelines.\nPipelines connect endpoints to backends and define the request processing flow.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Pipeline name/identifier (required)",
            "maxLength": 255
          },
          "service_id": {
            "type": [
              "integer",
              "null"
            ],
            "description": "Associated service ID (optional, must exist in services table)"
          }
        },
        "required": [
          "name"
        ],
        "title": "PipelineRequest"
      },
      "PipelineResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "pipeline"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "description": {
            "type": [
              "string",
              "null"
            ]
          },
          "team_id": {
            "type": "string"
          },
          "gateway_id": {
            "type": [
              "string",
              "null"
            ]
          },
          "networks": {
            "type": "array",
            "prefixItems": [
              {
                "type": "string"
              }
            ],
            "minItems": 1,
            "maxItems": 1,
            "additionalItems": false
          },
          "endpoints": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 0,
                "maxItems": 0,
                "additionalItems": false
              }
            ]
          },
          "backends": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 0,
                "maxItems": 0,
                "additionalItems": false
              }
            ]
          },
          "middleware": {
            "anyOf": [
              {
                "type": "object",
                "additionalProperties": {}
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 0,
                "maxItems": 0,
                "additionalItems": false
              }
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "description",
          "team_id",
          "gateway_id",
          "endpoints",
          "backends",
          "middleware",
          "created_at",
          "updated_at"
        ],
        "title": "PipelineResource"
      },
      "PolicyRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "enabled": {
            "type": "boolean"
          }
        },
        "required": [
          "name"
        ],
        "title": "PolicyRequest"
      },
      "PolicyResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "policy"
            ]
          },
          "id": {
            "type": "string"
          },
          "code": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "enabled": {
            "type": "integer"
          },
          "team_id": {
            "type": "string"
          },
          "gateway_id": {
            "type": "string"
          },
          "rules": {
            "anyOf": [
              {
                "type": "array",
                "items": {}
              },
              {
                "type": "array",
                "items": {
                  "type": "string"
                },
                "minItems": 0,
                "maxItems": 0,
                "additionalItems": false
              }
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "code",
          "name",
          "enabled",
          "team_id",
          "gateway_id",
          "rules",
          "created_at",
          "updated_at"
        ],
        "title": "PolicyResource"
      },
      "ServiceRequest": {
        "type": "object",
        "description": "Service Request\n\nValidation rules for creating and updating services on gateways.",
        "properties": {
          "name": {
            "type": "string",
            "description": "Service display name (required)",
            "maxLength": 255
          }
        },
        "required": [
          "name"
        ],
        "title": "ServiceRequest"
      },
      "TransformRequest": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "maxLength": 255
          },
          "instructions": {
            "type": [
              "string",
              "null"
            ]
          }
        },
        "required": [
          "name"
        ],
        "title": "TransformRequest"
      },
      "TransformResource": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "transform"
            ]
          },
          "id": {
            "type": "string"
          },
          "name": {
            "type": "string"
          },
          "team_id": {
            "type": "string"
          },
          "gateway_id": {
            "type": "string"
          },
          "options": {
            "type": "object",
            "properties": {
              "instructions": {
                "type": [
                  "string",
                  "null"
                ]
              }
            },
            "required": [
              "instructions"
            ]
          },
          "created_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          },
          "updated_at": {
            "type": [
              "string",
              "null"
            ],
            "format": "date-time"
          }
        },
        "required": [
          "type",
          "id",
          "name",
          "team_id",
          "gateway_id",
          "options",
          "created_at",
          "updated_at"
        ],
        "title": "TransformResource"
      }
    },
    "responses": {
      "ValidationException": {
        "description": "Validation error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Errors overview."
                },
                "errors": {
                  "type": "object",
                  "description": "A detailed description of each field that failed validation.",
                  "additionalProperties": {
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                }
              },
              "required": [
                "message",
                "errors"
              ]
            }
          }
        }
      },
      "AuthenticationException": {
        "description": "Unauthenticated",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "AuthorizationException": {
        "description": "Authorization error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      },
      "ModelNotFoundException": {
        "description": "Not found",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "properties": {
                "message": {
                  "type": "string",
                  "description": "Error overview."
                }
              },
              "required": [
                "message"
              ]
            }
          }
        }
      }
    }
  }
}